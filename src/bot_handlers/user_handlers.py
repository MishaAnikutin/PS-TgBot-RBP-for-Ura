import io 
from typing import Optional
from aiogram import Router, F, Bot
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command, StateFilter
from aiogram.types import Message, ReplyKeyboardRemove, ContentType, CallbackQuery

from ..models.page_model import Page, PageColors
from ..models.user_model import FileModel, PhotoModel, UserData
from ..file_handlers.base import BasePhoto, BaseFile

from ..states.user_states import HandleFileStates
from ..printer_api import PrinterAPI
from ..file_handlers import create_document, ALLOWED_FORMATS

from ..utils.keyboards import (yesno_keyboard, stop_keyboard, payment_keyboard, bw_print_keyboard)
from ..database import CRUDActions, UserCRUDModel

from ..states.user_states import HandleFileStates
from ..callback_data import HandleFileCallback

from ..payment import paymentFactory
from ..payment.models import CreatePaymentModel, PaymentInfoModel, PaymentStatus


user_router = Router()


@user_router.message(StateFilter(None), Command("start"))
async def start(message: Message, state: FSMContext):
    user = UserCRUDModel(uid=message.chat.id, username=message.chat.username)
    
    if (not CRUDActions.check_user_in_db(user)):
        CRUDActions.add_user(user=user)
        
    await message.answer(
        text = f'–ü—Ä–∏–≤–µ—Ç, {message.chat.username}.\n' \
               f'–Ø –±–æ—Ç —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∏ . ' \
               f'–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å —Å–æ–∑–¥–∞—Ç—å –æ–Ω–ª–∞–π–Ω-–∑–∞–∫–∞–∑, –æ–ø–ª–∞—Ç–∏—Ç—å –µ–≥–æ –∏ –∑–∞–±—Ä–∞—Ç—å –≤ —Ç–∏–ø–æ–≥—Ä–∞—Ñ–∏–∏ –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è!\n\n' \
               f'–î–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:\n' \
               f'1) –ß—ë—Ä–Ω–æ-–±–µ–ª–∞—è –ø–µ—á–∞—Ç—å - 8 —Ä—É–±/—Å—Ç—Ä',
          reply_markup=ReplyKeyboardRemove()
        )
    
    await message.answer(text=f"–ü—Ä–∏—à–ª–∏ —Å—é–¥–∞ —Ñ–∞–π–ª –≤ —Ñ–æ—Ä–º–∞—Ç–µ: {', '.join(ALLOWED_FORMATS)}, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å")
    await state.set_state(HandleFileStates.HandleFilesState)


@user_router.callback_query(F.data == HandleFileCallback.Reset)
async def cancel(callback_query: CallbackQuery, state: FSMContext):
    '''Cancel handle and return to start'''
    await state.clear()
    return await start(callback_query.message, state) 


@user_router.message(F.content_type == ContentType.PHOTO, HandleFileStates.HandleFilesState)
async def handle_photos(message: Message, state: FSMContext, bot: Bot):
    await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª–æ–º')


@user_router.message(F.content_type == ContentType.DOCUMENT, HandleFileStates.HandleFilesState)
async def handle_files(message: Message, state: FSMContext, bot: Bot):
    filename = message.document.file_name
    file_info = await bot.get_file(message.document.file_id)
    file_bytes: io.BytesIO = await bot.download_file(file_path=file_info.file_path)

    try:
        document = create_document(file_path=file_info.file_path, file_bytes=file_bytes)
    
    except ValueError as exc:
        await message.answer(f'–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–æ–≤, —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–æ—Ä–º–∞—Ç–∞: {", ".join(ALLOWED_FORMATS)}')
        return await state.clear()
        
    num_pages = document.get_number_pages()

    file_data = FileModel(filename=filename,document=document, num_pages=num_pages, file_bytes=file_bytes)
    user_data = UserData(uid=message.chat.id, username=message.chat.username, file_data=file_data)
        
    await state.set_data({'user_data': user_data})
    
    await message.answer(
        text=f'–û—Ç–ª–∏—á–Ω–æ, —Ñ–∞–π–ª {filename} –ø–æ–ª—É—á–µ–Ω. –í–∞–º –Ω—É–∂–Ω–∞ —Ü–≤–µ—Ç–Ω–∞—è –∏–ª–∏ —á–µ—Ä–Ω–æ-–±–µ–ª–∞—è –ø–µ—á–∞—Ç—å?\n\n',
        reply_markup=await bw_print_keyboard()
    )

    await state.set_state(HandleFileStates.NumberOfCopiesState)


async def get_document(message: Message, bot: Bot):
    filename = message.document.file_name
    file_info = await bot.get_file(message.document.file_id)
    file_bytes: io.BytesIO = await bot.download_file(file_path=file_info.file_path)

    document = create_document(file_path=file_info.file_path, file_bytes=file_bytes)
    num_pages = document.get_number_pages()

    file_data = FileModel(filename=filename,document=document, num_pages=num_pages, file_bytes=file_bytes)
    return file_data


@user_router.message(~(F.content_type == ContentType.DOCUMENT), HandleFileStates.HandleFilesState)
async def handle_files_error(message: Message):
    return await message.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ñ–∞–π–ª!", reply_markup=await stop_keyboard(callback_factory=HandleFileCallback))



@user_router.callback_query(F.data.startswith(HandleFileCallback.PrintingColor))
async def handle_colorpaper(call: CallbackQuery, state: FSMContext):
    color = call.data.split(':')[-1] #printing_color:—Ü–≤–µ—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å -> —Ü–≤–µ—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å
    
    data: UserData = (await state.get_data())['user_data']
    
    data.bw_printing = color
    await state.set_data({'user_data': data})
    
    await call.message.answer(f"–û—Ç–ª–∏—á–Ω–æ! –°–∫–æ–ª—å–∫–æ –∫–æ–ø–∏–π —Ç–µ–±–µ –Ω—É–∂–Ω–æ?")
    await state.set_state(HandleFileStates.NumberOfCopiesState)

@user_router.message(HandleFileStates.NumberOfCopiesState)
async def handle_number_of_copies(message: Message, state: FSMContext):
    try:
        num_of_copies = int(message.text)
    except ValueError:
        return await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    
    data: UserData = (await state.get_data())['user_data']
    data.num_copies = num_of_copies
    
    printer_capacity = await PrinterAPI.get_printer_capacity()
    total_pages = data.file_data.num_pages * num_of_copies
    
    page = Page(page_color = data.bw_printing)
    data.value = page.total_value(total_pages)
    
    if printer_capacity < total_pages:
        await state.clear()
        
        return await message.answer(
            f"–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –º—ã –Ω–µ –º–æ–∂–µ–º —Å–µ–π—á–∞—Å —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤\n\n"\
            f"–í –ø—Ä–∏–Ω—Ç–µ—Ä–µ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏—Å—Ç–æ–≤, –Ω—É–∂–Ω–æ {total_pages}, –∫–æ–≥–¥–∞ –∏–º–µ–µ—Ç—Å—è {printer_capacity}",
            reply_markup=await stop_keyboard(callback_factory=HandleFileCallback, text='–ù–∞–∑–∞–¥')
        )

    await state.set_data({'user_data': data})
    await message.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –¢–æ–≥–¥–∞, –ø–æ–ª—É—á–∞–µ—Ç—Å—è:\n\n"\
        f"- {num_of_copies} –∫–æ–ø–∏–∏(-–π) —Ñ–∞–π–ª–∞ {data.file_data.filename} ({data.file_data.num_pages} —Å—Ç—Ä–∞–Ω–∏—Ü) "\
        f"–ø–µ—á–∞—Ç—å: {data.bw_printing}\n\n"
        f"–ò—Ç–æ–≥–æ –≤—ã–π–¥–µ—Ç: {data.value} —Ä—É–±.",
        reply_markup=await yesno_keyboard()
    )
    

@user_router.callback_query(F.data == HandleFileCallback.CancelPurchase)
async def reset_handler(call: CallbackQuery, state: FSMContext):
    await state.clear()
    await call.message.answer(text='–ü–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞')


@user_router.callback_query(F.data == HandleFileCallback.FakePyrchase)
async def fake_purchase_handler(call: CallbackQuery, state: FSMContext):
    await call.message.answer(
        text = '–û–ø–ª–∞—á–∏–≤–∞—Ç—å –ø–æ–∫–∞ —Ä–∞–Ω–æ)\n\n–ñ–¥–µ–º –Ω–∞ –æ—Ç–∫—Ä—ã—Ç–∏–∏ 2 –º–∞—èü•≥',
        reply_markup=await stop_keyboard(callback_factory=HandleFileCallback, text='–ù–∞–∑–∞–¥')
    )
    
    await state.clear()


@user_router.callback_query(F.data == HandleFileCallback.MakePurchase)
async def make_purchase_handler(call: CallbackQuery, state: FSMContext):
    data: UserData = (await state.get_data())['user_data']
    value = data.value
    
    payment: CreatePaymentModel = await paymentFactory.create_payment(value=value)
    
    link = payment.Data.paymentLink
    data.payment_id = payment.Data.operationId
    
    await call.message.answer(
        text=f"–°—É–º–º–∞ –∫ –æ–ø–ª–∞—Ç–µ: {value}\n"
             f"–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã, –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É¬ª",
        reply_markup=await payment_keyboard(link)
    )
        
    
@user_router.callback_query(F.data == HandleFileCallback.CheckPayment)
async def check_payment_handler(call: CallbackQuery, state: FSMContext):
    data: UserData = (await state.get_data())['user_data']
    payment_information = await paymentFactory.get_payment_information(payment_id=data.payment_id)

    # FIXME: –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –ø–∞—Ä—Å–∏—Ç—Å—è Operation, –∫–∞–∫ list
    payment_status = payment_information.Data.Operation[0]['status'] 
        
    match payment_status:
        case PaymentStatus.APPROVED:            
            try:
                await PrinterAPI.print_files(file=data.file_data.file_bytes, num_copies=data.num_copies)
            except Exception as exc:
                await call.message.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞:\n\n{exc}\n–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ –≤–æ–∑–≤—Ä–∞—Ç —Å—Ä–µ–¥—Å—Ç–≤, –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —Ç–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫—É")
                await paymentFactory.refund_payment(payment_id=data.payment_id, amount=data.value) 
            else:
                await call.message.answer(text="–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n\n–û—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ñ–∞–π–ª—ã –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä ‚úÖ")
            await state.clear()
        
        case PaymentStatus.CREATED:
            await call.message.answer(text="–û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ—à–ª–∞")
            
        case PaymentStatus.EXPIRED:
            await call.message.answer(text="–ò—Å—Ç–µ–∫ —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –æ–ø–ª–∞—Ç—ã, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Å—ã–ª–∫—É")
            await state.set_state(HandleFileCallback.MakePurchase)
            await make_purchase_handler(call=call, state=state)
        
        case _:
            print('—ç—ç—ç—ç—ç—ç —Ö–∑ —á–µ —ç—Ç–æ')
            
